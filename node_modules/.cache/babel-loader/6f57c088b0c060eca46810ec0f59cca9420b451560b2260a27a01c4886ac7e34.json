{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useUnityMetricsInfo = void 0;\nvar react_1 = require(\"react\");\n/**\n * Hook to retrieve metrics information from the Unity instance.\n * This is a placeholder implementation and should be replaced with actual logic\n * to interact with the Unity instance and retrieve metrics.\n * @param unityProvider the Unity provider instance\n * @param metricsConfig configuration for metrics retrieval\n * @returns\n */\nvar useUnityMetricsInfo = function (getMetricsInfo, metricsConfig) {\n  // Initial state for metrics info\n  var _a = (0, react_1.useState)({}),\n    metricsInfo = _a[0],\n    setMetricsInfo = _a[1];\n  // Effect to periodically retrieve metrics info from the Unity instance\n  // This assumes that the Unity provider has a method `getMetricsInfo` to retrieve the metrics.\n  // If this method does not exist, you will need to implement it in your Unity instance.\n  // The interval for retrieving metrics is configurable via `metricsConfig`.\n  (0, react_1.useEffect)(function () {\n    // Set up an interval to retrieve metrics info from the Unity instance\n    // The interval is defined by `metricsConfig.interval`, defaulting to 1000ms\n    // if not provided.\n    var intervalId = setInterval(function () {\n      var info = getMetricsInfo();\n      if (typeof info === \"undefined\") {\n        // If the info is undefined, return early.\n        // This could happen if the Unity instance is not ready or if there is an error\n        // retrieving the metrics.\n        return;\n      }\n      // Update the state with the retrieved metrics info\n      // This will trigger a re-render of the component using this hook\n      // with the new metrics info.\n      setMetricsInfo(info);\n    }, metricsConfig.interval || 1000);\n    return function () {\n      // Clear the interval when the component unmounts or when the dependencies change\n      // to prevent memory leaks and unnecessary calls.\n      clearInterval(intervalId);\n    };\n  }, [getMetricsInfo, metricsConfig.interval]);\n  return metricsInfo;\n};\nexports.useUnityMetricsInfo = useUnityMetricsInfo;","map":{"version":3,"names":["Object","defineProperty","exports","value","useUnityMetricsInfo","react_1","require","getMetricsInfo","metricsConfig","_a","useState","metricsInfo","setMetricsInfo","useEffect","intervalId","setInterval","info","interval","clearInterval"],"sources":["/Users/hayashidareki/Documents/ポートフォリオ/react_unity/node_modules/react-unity-webgl/distribution/hooks/use-unity-metrics-info.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useUnityMetricsInfo = void 0;\nvar react_1 = require(\"react\");\n/**\n * Hook to retrieve metrics information from the Unity instance.\n * This is a placeholder implementation and should be replaced with actual logic\n * to interact with the Unity instance and retrieve metrics.\n * @param unityProvider the Unity provider instance\n * @param metricsConfig configuration for metrics retrieval\n * @returns\n */\nvar useUnityMetricsInfo = function (getMetricsInfo, metricsConfig) {\n    // Initial state for metrics info\n    var _a = (0, react_1.useState)({}), metricsInfo = _a[0], setMetricsInfo = _a[1];\n    // Effect to periodically retrieve metrics info from the Unity instance\n    // This assumes that the Unity provider has a method `getMetricsInfo` to retrieve the metrics.\n    // If this method does not exist, you will need to implement it in your Unity instance.\n    // The interval for retrieving metrics is configurable via `metricsConfig`.\n    (0, react_1.useEffect)(function () {\n        // Set up an interval to retrieve metrics info from the Unity instance\n        // The interval is defined by `metricsConfig.interval`, defaulting to 1000ms\n        // if not provided.\n        var intervalId = setInterval(function () {\n            var info = getMetricsInfo();\n            if (typeof info === \"undefined\") {\n                // If the info is undefined, return early.\n                // This could happen if the Unity instance is not ready or if there is an error\n                // retrieving the metrics.\n                return;\n            }\n            // Update the state with the retrieved metrics info\n            // This will trigger a re-render of the component using this hook\n            // with the new metrics info.\n            setMetricsInfo(info);\n        }, metricsConfig.interval || 1000);\n        return function () {\n            // Clear the interval when the component unmounts or when the dependencies change\n            // to prevent memory leaks and unnecessary calls.\n            clearInterval(intervalId);\n        };\n    }, [getMetricsInfo, metricsConfig.interval]);\n    return metricsInfo;\n};\nexports.useUnityMetricsInfo = useUnityMetricsInfo;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAG,KAAK,CAAC;AACpC,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIF,mBAAmB,GAAG,SAAAA,CAAUG,cAAc,EAAEC,aAAa,EAAE;EAC/D;EACA,IAAIC,EAAE,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,QAAQ,EAAE,CAAC,CAAC,CAAC;IAAEC,WAAW,GAAGF,EAAE,CAAC,CAAC,CAAC;IAAEG,cAAc,GAAGH,EAAE,CAAC,CAAC,CAAC;EAC/E;EACA;EACA;EACA;EACA,CAAC,CAAC,EAAEJ,OAAO,CAACQ,SAAS,EAAE,YAAY;IAC/B;IACA;IACA;IACA,IAAIC,UAAU,GAAGC,WAAW,CAAC,YAAY;MACrC,IAAIC,IAAI,GAAGT,cAAc,CAAC,CAAC;MAC3B,IAAI,OAAOS,IAAI,KAAK,WAAW,EAAE;QAC7B;QACA;QACA;QACA;MACJ;MACA;MACA;MACA;MACAJ,cAAc,CAACI,IAAI,CAAC;IACxB,CAAC,EAAER,aAAa,CAACS,QAAQ,IAAI,IAAI,CAAC;IAClC,OAAO,YAAY;MACf;MACA;MACAC,aAAa,CAACJ,UAAU,CAAC;IAC7B,CAAC;EACL,CAAC,EAAE,CAACP,cAAc,EAAEC,aAAa,CAACS,QAAQ,CAAC,CAAC;EAC5C,OAAON,WAAW;AACtB,CAAC;AACDT,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}